#ifndef LISTENER_H
#define LISTENER_H
#include "ArrayList.h"


/**
 * A ListenerKey is the key that is generated by initialize() and sent to
 * the client. This key is required for all Listener functions which 
 * interact with the client data file.
 * 
 * fileName is the name of the client data file and list is the list which
 * stores data from the client data file.
 * 
 * A ListenerKey is proper if:
 * 		- fileName points to a allocated block of memory large enough to
 * 			hold the client data file name
 * 		- list contains all the data from the client data file named as 
 * 			the target of fileName
 * 
 * 		And:
 * 		- fileName == list == NULL
 */
struct _ListenerKey {
	char* fileName;			// Name of client data file
	ArrayList* list;		// List which holds data from client data file
	
};
typedef struct _ListenerKey ListenerKey;

/**
 * Initializes and returns a key. dataFile is the name of the client data
 * file.
 * Pre:	If dataFile is real, its contents conforms to project standards. 
 * Post:	ListenerKey holding data fields which correspond to the 
 * 			client data file is returned. If data does not conform to
 * 			project standards either (1) NULL is returned or (2) undefine
 * 			behavior occurs.
 */
ListenerKey initialize(char* dataFile);

/**
 * Searches key's ArrayList for all entries containing the token. Displays
 * the results on the screen.
 * Pre: key has been initialized without issues with initialize().
 * Post: Results posted to console.
 */
void searchDisplay(ListenerKey* key, char* token);

/**
 * Pulls all entries from the key's ArrayList and displays it onto the 
 * screen.
 * Pre: key has been initialized without issues with initialize().
 * Post: All entries displayed to console.
 */
void displayALL(ListenerKey* key);

/**
 * Adds input to the end of the key's fileName data file and adds it to
 * the key's ArrayList.
 * Pre: key has been initialized without issues with initialize().
 * Post: input added to end of client data file and into ArrayList.
 */
void addToFile(Address* input, ListenerKey* key);

/**
 * Replaces key's ArrayList index at "index" with input as well as the
 * corresponding index from the client data file. 
 * Pre: key has been initialized without issues with initialize(). Address
 * 		has been initialized without issue with createAddress().
 * Post: ArrayList at index and its corresponding client data file entry 
 * 			replaced with input. Results posted to console.
 */
void changeFile(Address* input, uint32_t index, ListenerKey* key);

/**
 * Frees all of the data contains within key as well as key itself.
 * Pre: key has been initialized without issues with initialize().
 * Post: key is proper with all freed and null fields. 
 */
void endListener(ListenerKey* key);
#endif
